import java.util.*;

public class LinkdList {

    private int size;
    Node head;

    // Constructor
    LinkdList() {
        this.size = 0;
    }

    // Node class
    class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Add element at the end
    public void AddLast(int data) {
        Node newNode = new Node(data);
        size++; // Increment size on adding a node

        if (head == null) {
            head = newNode;
            return;
        }

        Node currNode = head;
        while (currNode.next != null) {
            currNode = currNode.next;
        }
        currNode.next = newNode;
    }

    // Print the linked list
    public void print() {
        if (head == null) {
            System.out.println("Null");
            return;
        }

        Node currNode = head;
        while (currNode != null) {
            System.out.print(currNode.data + " -> ");
            currNode = currNode.next;
        }
        System.out.println("Null");
    }

    // Search for a key in the list
    public void Search(int key) {
        Node currNode = head;
        int index = 0;
        boolean found = false;

        while (currNode != null) {
            if (currNode.data == key) {  // Compare integers correctly
                System.out.println("Key found at index: " + index);
                found = true;
                return; // Stop after finding the first occurrence
            }
            currNode = currNode.next;
            index++;
        }

        
    }

    // Get the size of the linked list
    public int size() {
        return size;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        LinkdList l1 = new LinkdList();

        l1.AddLast(1);
        l1.AddLast(5);
        l1.AddLast(7);
        l1.AddLast(3);
        l1.AddLast(8);
        l1.AddLast(2);
        l1.AddLast(3);
        l1.print();

        l1.Search(7);  // Searching for an existing element
        l1.Search(10); // Searching for a non-existing element
    }
}
